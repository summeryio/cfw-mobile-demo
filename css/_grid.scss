$grid-gutter-width: 20px !default;
$grid-columns: 12 !default;
$screen-sm-min: 768px !default;
$screen-md-min: 992px !default;
$screen-lg-min: 1200px !default;
$container-sm: 750px !default;
$container-md: 970px !default;
$container-lg: 980px !default;


@mixin container-fixed {
    margin-left: auto;
    margin-right: auto;
    // padding-left:  floor(($grid-gutter-width / 2));
    // padding-right: ceil(($grid-gutter-width / 2));
    @include clearfix;
    @include box-sizing(border-box);
}

@mixin make-row {
    // margin-left:  ceil(($grid-gutter-width / -2));
    // margin-right: floor(($grid-gutter-width / -2));
    @include clearfix;
}

@mixin make-grid-columns($i: 1, $list: ".col-xs-#{$i}") {
    @for $i from (1 + 1) through $grid-columns {
        $list: "#{$list}, .col-xs-#{$i}";
    }
    #{$list} {
        position: relative;
        min-height: 1px;
        // padding-left:  ceil(($grid-gutter-width / 2));
        // padding-right: floor(($grid-gutter-width / 2));
        @include box-sizing(border-box);
    }
}

@mixin float-grid-columns($class, $i: 1, $list: ".col-#{$class}-#{$i}") {
    @for $i from (1 + 1) through $grid-columns {
      $list: "#{$list}, .col-#{$class}-#{$i}";
    }
    #{$list} {
      float: left;
    }
}

// 设置列width/offset/push/pull
@mixin calc-grid-column($index, $class, $type) {
    @if ($type == width) and ($index > 0) {
      .col-#{$class}-#{$index} {
        width: percentage(($index / $grid-columns));
      }
    }
    @if ($type == push) and ($index > 0) {
      .col-#{$class}-push-#{$index} {
        left: percentage(($index / $grid-columns));
      }
    }
    @if ($type == push) and ($index == 0) {
      .col-#{$class}-push-0 {
        left: auto;
      }
    }
    @if ($type == pull) and ($index > 0) {
      .col-#{$class}-pull-#{$index} {
        right: percentage(($index / $grid-columns));
      }
    }
    @if ($type == pull) and ($index == 0) {
      .col-#{$class}-pull-0 {
        right: auto;
      }
    }
    @if ($type == offset) {
      .col-#{$class}-offset-#{$index} {
        margin-left: percentage(($index / $grid-columns));
      }
    }
}
@mixin loop-grid-columns($columns, $class, $type) {
    @for $i from 0 through $columns {
        @include calc-grid-column($i, $class, $type);
    }
}


@mixin make-grid($class) {
    @include float-grid-columns($class);
    @include loop-grid-columns($grid-columns, $class, width);
    @include loop-grid-columns($grid-columns, $class, push);
    @include loop-grid-columns($grid-columns, $class, pull);
    @include loop-grid-columns($grid-columns, $class, offset);
}

// 调用
.container {
    @include container-fixed;

    // @media (min-width: $screen-sm-min) {
    //     width: $container-sm;
    // }
    // @media (min-width: $screen-md-min) {
    //     width: $container-md;
    // }
    // @media (min-width: $screen-lg-min) {
    //     width: $container-lg;
    // }
}
.container-fluid {
    @include container-fixed;
}

.row {
    @include make-row;
}

@include make-grid-columns;
@include make-grid(xs);

// @media (min-width: $screen-sm-min) {
//     @include make-grid(sm);
// }
// @media (min-width: $screen-md-min) {
//     @include make-grid(md);
// }
// @media (min-width: $screen-lg-min) {
//     @include make-grid(lg);
// }